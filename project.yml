# Ceedling configuration to run unit testing with code coverage using GCC compiler and the 
# mcal library, user only has to type make test target from the makefile to run
# all the unit test cases written on files in folder test 
:project:
  :build_root: Build/ceedling/       # Directory where ceedling will place its output
  :use_test_preprocessor: TRUE
  :use_auxiliary_dependencies: TRUE
  :test_file_prefix: test_


# Project paths for test and source and header files
:paths:
  :test:
    - test/**    # directory where the unit testing are
    - test/support/**
  :source:
    - autosar/**      # directory where the functions to test are
    - autosar/libs/**
    - autosar/Sys/**
    - -:autosar/mcal/regs/** # exclude the registers from the source
    - -:cfg/** 

# Since there isn't a equivalent source for Cfh.h files, it is necesary to add manually the 
# corresponding source Lcfc.c files in this way
:files:
  :support:
    - test/support/Can_Lcfg.c
    - test/support/Spi_Lcfg.c
    - test/support/Mcu_Lcfg.c
    - test/support/Dio_Lcfg.c
    - test/support/Pwm_Lcfg.c
    - test/support/Port_Lcfg.c
    - test/support/Gpt_Lcfg.c
    - test/support/CanIf_Lcfg.c

# Global defines applicable only when you run the code using ceedling
:defines:
  :test:
    - UTEST           # define the macro UTEST to remove the static qualifier
  

# Plugins to add extra functionality to ceedling, like code coverage and pretty reports
:plugins: 
  :load_paths:
    - "#{Ceedling.load_path}"
  :enabled:
    - stdout_pretty_tests_report
    - module_generator
    - gcov


# enable and configure code coverage 
:gcov:
  :abort_on_uncovered: true
  :uncovered_ignore_list:
    - main.c #
    - startup.c #
    - autosar/mcal/Pwm/Pwm_Arch.c
    - autosar/mcal/Det/Det.c
    - autosar/mcal/Fls/Fls.c
    - autosar/mcal/Fls/Fls_Arch.c
    - autosar/mcal/Spi/Spi_Arch.c
    - autosar/Sys/Det.c
    - autosar/mcal/Mcu/Mcu_Arch.c
    - autosar/mcal/Adc/Adc.c
    - autosar/mcal/Adc/Adc_Arch.c
    - autosar/Com/CanIf.c
    - autosar/mcal/Gpt/Gpt.c
    - autosar/mcal/Gpt/Gpt_Arch.c
  :utilities:
    - gcovr
  :reports:
    - HtmlDetailed
  :gcovr:
    :report_exclude:


# Configure the mock generator
:cmock:
  :mock_prefix: mock_         # Generate mock version using mock prefix
  :treat_externs: :include
  :when_no_prototypes: :warn
  :enforce_strict_ordering: TRUE
  :includes:
    - Std_Types.h             # Include by default this header on each mock file
  :plugins:
    - :ignore                 # Generate <function>_Ignore and <function>_IgnoreAndReturn
    - :ignore_arg             # Generate <function>_IgnoreArg_<param_name>
    - :expect_any_args        # Generate <function>_func_ExpectAnyArgs and <function>_func_ExpectAnyArgsAndReturn
    - :array                  # Generate <function>_ExpectWithArray and <function>_ExpectWithArrayAndReturn
    - :callback               # Generate <function>_ 
    - :return_thru_ptr        # Generate <function>_ReturnArrayThruPtr_<param_name> and <function>_ReturnMemThruPtr_<param_name>
  
    
# extra flags to add to default compiler GCC whe run commands ceedling test:all and ceedling gcov:all
# these flags are the same written in the makefile used to build the project plus three extra flags
# for some reason are needed by GCC to avoid cast warnings in HAL library
:flags:
  :test:        # flags when GCC runs with ceedling test:all
    :compile:
      :*:
        - -O0
        - -ffunction-sections
        - -fdata-sections
        - -fno-builtin
        - -std=c99
        - -pedantic
        - -Wall
        - -Werror
        - -Wstrict-prototypes
        - -fsigned-char
        - -fomit-frame-pointer
        - -fverbose-asm
        # Extra flags to avoid cast warnings in the HAL library
        - -Wno-int-to-pointer-cast 
        - -Wno-pointer-to-int-cast
        - -Wno-error=address
  :gcov:        # flags when GCC runs with ceedling gcov:all
    :compile:
      :*:
        - -O0
        - -ffunction-sections
        - -fdata-sections
        - -fno-builtin
        - -std=c99
        - -pedantic
        - -Wall
        - -Werror
        - -Wstrict-prototypes
        - -fsigned-char
        - -fomit-frame-pointer
        - -fverbose-asm
        # Extra flags to avoid cast warnings in the HAL library
        - -Wno-int-to-pointer-cast 
        - -Wno-pointer-to-int-cast
        - -Wno-error=address
